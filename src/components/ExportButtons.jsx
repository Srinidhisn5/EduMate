import React, { useState } from 'react'

const ExportButtons = ({ studyGuide }) => {
  const [copySuccess, setCopySuccess] = useState(false)
  const [downloadSuccess, setDownloadSuccess] = useState(false)

  const formatStudyGuideForExport = () => {
    let content = `STUDY GUIDE: ${studyGuide.topic.toUpperCase()}\n`
    content += `Generated on: ${new Date().toLocaleDateString()}\n`
    content += `Generated by: EduMate AI Study Guide Generator\n\n`
    content += `=${'='.repeat(50)}\n\n`
    
    // Add summary
    content += studyGuide.summary + '\n\n'
    
    // Add practice questions
    if (studyGuide.includePracticeQuestions && studyGuide.practiceQuestions) {
      content += `PRACTICE QUESTIONS\n`
      content += `=${'='.repeat(50)}\n\n`
      studyGuide.practiceQuestions.forEach((q, index) => {
        content += `Q${index + 1}: ${q.question}\n`
        content += `A: ${q.answer}\n\n`
      })
    }
    
    // Add video recommendations
    if (studyGuide.includeVideos && studyGuide.videoRecommendations) {
      content += `VIDEO RECOMMENDATIONS\n`
      content += `=${'='.repeat(50)}\n\n`
      studyGuide.videoRecommendations.forEach((video, index) => {
        content += `${index + 1}. ${video.title}\n`
        content += `   Duration: ${video.duration}\n`
        content += `   Description: ${video.description}\n`
        content += `   URL: ${video.url}\n\n`
      })
    }
    
    content += `\nSTUDY TIPS\n`
    content += `=${'='.repeat(50)}\n`
    content += `â€¢ Review this guide regularly to reinforce your learning\n`
    content += `â€¢ Practice the questions and explain concepts to others\n`
    content += `â€¢ Watch the recommended videos for visual learning\n`
    content += `â€¢ Create your own notes and summaries based on this guide\n\n`
    content += `Happy studying! ðŸ“šâœ¨`
    
    return content
  }

  const copyToClipboard = async () => {
    try {
      const content = formatStudyGuideForExport()
      await navigator.clipboard.writeText(content)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
    } catch (err) {
      console.error('Failed to copy: ', err)
      // Fallback for older browsers
      const textArea = document.createElement('textarea')
      textArea.value = formatStudyGuideForExport()
      document.body.appendChild(textArea)
      textArea.select()
      document.execCommand('copy')
      document.body.removeChild(textArea)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
    }
  }

  const downloadAsText = () => {
    const content = formatStudyGuideForExport()
    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `study-guide-${studyGuide.topic.toLowerCase().replace(/\s+/g, '-')}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    
    setDownloadSuccess(true)
    setTimeout(() => setDownloadSuccess(false), 2000)
  }

  return (
    <div className="flex flex-wrap gap-2 lg:gap-3">
      <button
        onClick={copyToClipboard}
        className={`flex items-center px-3 lg:px-4 py-2 lg:py-3 rounded-lg font-medium text-xs lg:text-sm transition-all duration-200 backdrop-blur-sm border ${
          copySuccess 
            ? 'bg-green-500/20 border-green-400/30 text-green-300' 
            : 'bg-white/10 border-white/20 text-white hover:bg-white/20 hover:border-white/30'
        }`}
      >
        {copySuccess ? (
          <>
            <svg className="w-4 h-4 lg:w-5 lg:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            Copied!
          </>
        ) : (
          <>
            <svg className="w-4 h-4 lg:w-5 lg:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
            </svg>
            Copy
          </>
        )}
      </button>
      
      <button
        onClick={downloadAsText}
        className={`flex items-center px-3 lg:px-4 py-2 lg:py-3 rounded-lg font-medium text-xs lg:text-sm transition-all duration-200 backdrop-blur-sm border ${
          downloadSuccess 
            ? 'bg-green-500/20 border-green-400/30 text-green-300' 
            : 'bg-white/10 border-white/20 text-white hover:bg-white/20 hover:border-white/30'
        }`}
      >
        {downloadSuccess ? (
          <>
            <svg className="w-4 h-4 lg:w-5 lg:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
            Downloaded!
          </>
        ) : (
          <>
            <svg className="w-4 h-4 lg:w-5 lg:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            Download
          </>
        )}
      </button>
    </div>
  )
}

export default ExportButtons 